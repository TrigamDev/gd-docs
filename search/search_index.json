{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"encoding/gjp/","title":"GJP","text":"<p>The GJP is a string sent in many requests for account authentication. This used in place of simply sending the user's password in the request, which is obviously wildly insecure. There are two variations: GJP (pre-2.2), and GJP2 (2.2+).</p> <p>Danger</p> <p>NEVER send your GJP to anyone for any reason. Doing so will compromise your account!</p>"},{"location":"encoding/gjp/#gjp2","title":"GJP2","text":"<p>GJP2 is a hash usually sent as the <code>gjp2</code> parameter in requests. It is created using the SHA-1 hash function, and is formatted as a 20-byte, hexadecimal hash value, also known as a message digest.</p> Warning <p>While hashing the password with salt is good practice and secure, Rob's implementation isn't for various reasons:</p> <ul> <li> <p>Hash salts should be random as to prevent the same input from producing the same output. That is the purpose of a salt. Having the salt as an unchanging, arbitrary string defeats the purpose of having a salt.</p> </li> <li> <p>SHA-1 has long since been considered insecure, and is susceptible to chosen-prefix attacks. Many organizations have recommended it to be replaced with other hash functions, such as SHA-2 or SHA-3.</p> </li> </ul> <p>Thank you, Rob.</p>"},{"location":"encoding/gjp/#encoding","title":"Encoding","text":"<p>The hash is created with the user's password and adds <code>mI29fmAnxgTs</code> as salt.  </p> <p>Here is an example of how one could implement the encoding of the hash into code.</p> Example JSPython <pre><code>import crypto from \"crypto\"\n\nlet hash = crypto.createHash(\"sha1\")\nlet password = 'password123' // Replace with the user's password\nlet salt = \"mI29fmAnxgTs\"\n\nhash.update(password + salt)\nlet gjp2 = hash.digest('hex')\n\nconsole.log(gjp2)</code></pre> <pre><code>import hashlib\n\nhash = hashlib.sha1()\npassword = \"password123\" # Replace with user's password\nsalt = \"mI29fmAnxgTs\"\n\nhash.update((password + salt).encode())\ngjp2 = hash.hexdigest()\n\nprint(gjp2)</code></pre>"},{"location":"encoding/gjp/#decoding","title":"Decoding","text":"<p>While encoding a hash is simple enough to do, it cannot be decoded due to the one-way nature of a hash function. This does not mean it is safe to let others see the hash however, as this lets them make requests on your behalf.</p>"},{"location":"encoding/gjp/#gjp_1","title":"GJP","text":"<p>GJP is similar to GJP2, but is outdated and extremely insecure, hence the replacement with a newer version. Unlike GJP2, which uses a one-way hash function, GJP simply uses a combination of XOR encoding and base64 encoding, which can very easily be reversed.</p> Note <p>While the Geometry Dash client uses GJP2 for all of the requests, most endpoints still accept the old GJP. It is recommended to avoid using this, however, due to the lack of security GJP has.</p>"},{"location":"encoding/gjp/#encoding_1","title":"Encoding","text":"<p>The GJP is made by taking the user's password, XOR encoding it using a key of <code>37526</code>, and then encoding it again with base64.  </p> <p>Here is an example of how one could implement the encoding into code.</p> Example JSPython <pre><code>import crypto from \"crypto\"\n\nlet hash = crypto.createHash(\"sha1\")\nlet password = 'password123' // Replace with the user's password\nlet salt = \"mI29fmAnxgTs\"\n\nhash.update(password + salt)\nlet gjp2 = hash.digest('hex')\n\nconsole.log(gjp2)</code></pre> <pre><code>import base64\n\n# XOR encryption\ndef xor_cipher(text, key):\n    encrypted = \"\"\n    for i in range(len(text)):\n        encrypted += chr(ord(text[i]) ^ ord(key[i % len(key)]))\n    return encrypted\n\npassword = \"password123\" # Replace with user's password\nxor_encoded = xor_cipher(password, \"37526\")\n\ngjp = base64.b64encode(xor_encoded.encode()).decode()\ngjp.replace(\"+\", \"-\")\ngjp.replace(\"/\", \"_\")\n\nprint(gjp)</code></pre>"},{"location":"encoding/udid/","title":"UDID","text":"<p>The UDID, or Unique Device IDentifier is a string generated by devices in order to make them individually indentifiable. This is then optionally sent in requests in the <code>udid</code> field.</p>"},{"location":"server/endpoints/levels/event/getGJDailyLevel/","title":"getGJDailyLevel.php","text":"<p><code>https://www.boomlings.com/database/getGJDailyLevel.php</code></p> <p>Gets the index of the current daily level and the time left (in seconds).</p>"},{"location":"server/endpoints/levels/event/getGJDailyLevel/#parameters","title":"Parameters","text":"Name Value Type Required? Description secret Wmfd2893gb7 String \u2714 A 'password' needed for all API requests. weekly 0 Integer \u2716 Whether to get the daily or weekly level. (<code>0</code>: Daily, <code>1</code>: Weekly) gameVersion 22 Integer \u2716 The version of Geometry Dash. binaryVersion 42 Integer \u2716 The version of the Geometry Dash servers. gdw 0 Integer \u2716 Whether the request is being made from Geometry Dash World. accountID - Integer \u2716 The account ID of the user making the request. uuid - Integer \u2716 The user ID of the user making the request. udid - String \u2716 The UDID gjp2 - GJP2 \u2716 The GJP2 of the user making the request."},{"location":"server/endpoints/users/getGJUserInfo20/","title":"getGJUserInfo20.php","text":"<p><code>https://www.boomlings.com/database/getGJUserInfo20.php</code></p> <p>Gets the account info of a specific user, supplied by their account ID.  </p>"},{"location":"server/endpoints/users/getGJUserInfo20/#parameters","title":"Parameters","text":"Name Value Type Required? Description targetAccountID - Integer \u2714 The account ID of the user you want to get the information of. secret Wmfd2893gb7 String \u2714 A 'password' needed for all API requests. gameVersion 22 Integer \u2716 The version of Geometry Dash. binaryVersion 42 Integer \u2716 The version of the Geometry Dash servers. gdw 0 Integer \u2716 Whether the request is being made from Geometry Dash World. accountID - Integer \u2716 The account ID of the user making the request. uuid - Integer \u2716 The user ID of the user making the request. udid - String \u2716 The UDID gjp2 - GJP2 \u2716 The GJP2 of the user making the request. <p>Note</p> <p>Values of <code>-</code> are variable and should be supplied depending on the target user and the user making the request.</p>"},{"location":"server/endpoints/users/getGJUserInfo20/#response","title":"Response","text":"<p>Returns a user object for the user you want the account info of.</p> <p>Example</p> <pre><code>1:RobTop:2:16:13:20:17:175:10:35:11:2:51:0:3:2966:52:180:46:3259:4:5:8:0:18:2:19:1:50:0:20:UCz_yk8mDSAnxJq0ar66L4sw:21:483:22:1:23:1:24:1:25:1:26:1:28:0:43:1:48:1:53:1:54:1:30:258348:16:71:31:0:44:RobTopGames:45:robtopgames:49:2:55:2,2,1,0,0,0,0,0,0,0,0,0:56:51,32,82,280,105,20,71,5:57:0,3,6,21,6,2,0:29:1</code></pre>"},{"location":"server/endpoints/users/getGJUserInfo20/#example","title":"Example","text":"<p>Here is a basic example of how one could implement this in code.</p> JSPython <pre><code>import axios from \"axios\"\n\nlet data = {\n    \"targetAccountID\": 970465,\n    \"secret\": \"Wmfd2893gb7\"\n}\nlet headers = {\n    \"User-Agent\": \"\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\n\nlet req = await axios.post(\"https://www.boomlings.com/database/getGJUserInfo20.php\", data, { headers })\nconsole.log(req.data)</code></pre> <pre><code>import requests\n\ndata = {\n    \"targetAccountID\": 970465,\n    \"secret\": \"Wmfd2893gb7\"\n}\nheaders = {\n    \"User-Agent\": \"\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\n\nreq = requests.post(\"https://www.boomlings.com/database/getGJUserInfo20.php\", data = data, headers = headers)\nprint(req.text)</code></pre>"},{"location":"server/resources/user/","title":"Server User Resource","text":""},{"location":"server/resources/user/#user","title":"User","text":"<p>Each player of Geometry Dash has a profile containing various types of data, such as info, stats, completed levels, icons, and connected socials.</p> <p>A typical user server response is structured with a <code>key:value:key:value</code> pairing.</p> <p>Example</p> <pre><code>1:RobTop:2:16:13:20:17:175:10:35:11:2:51:0:3:2966:52:180:46:3259:4:5:8:0:18:2:19:1:50:0:20:UCz_yk8mDSAnxJq0ar66L4sw:21:483:22:1:23:1:24:1:25:1:26:1:28:0:43:1:48:1:53:1:54:1:30:258348:16:71:31:0:44:RobTopGames:45:robtopgames:49:2:55:2,2,1,0,0,0,0,0,0,0,0,0:56:51,32,82,280,105,20,71,5:57:0,3,6,21,6,2,0:29:1</code></pre>"},{"location":"server/resources/user/#keys","title":"Keys","text":"<p>Each <code>key</code> is tied to a component within the client and the <code>value</code> contains the data for that component.</p>"},{"location":"server/resources/user/#list-of-keys","title":"List of Keys","text":"Key Name Type Description <code>1</code> Username String The username of the user <code>2</code> User ID Integer The ID of user <code>3</code> Stars Integer The number of stars the user has earned <code>4</code> Demons Integer The number of demon levels the user has completed <code>6</code> Ranking Integer The global leaderboard position of the user <code>7</code> Account Highlight Integer The Account ID of the user, used for highlighting the user on the leaderboards <code>8</code> Creator Points Integer The number of creator points the user has earned <code>9</code> Display Icon Integer The ID of the display icon <code>10</code> Primary Color Integer The chosen primary user color <code>11</code> Secondary Color Integer The chosen secondary user color <code>13</code> Secret Coins Integer The number of secret coins the user has collected <code>14</code> Display Icon Type Integer The type of the display icon <code>15</code> Special Integer Use is unknown, usually the same for all users <code>16</code> Account ID Integer The account ID of the user <code>17</code> User Coins Integer The number of user coins the user has collected <code>18</code> Message State Integer Who the user allows messages from (<code>0</code>: All, <code>1</code>: Friends, <code>2</code>: None) <code>19</code> Friend Request State Integer Who the user allows friend requests from (<code>0</code>: All, <code>1</code>: None) <code>20</code> YouTube String The YouTube URL the user has linked <code>21</code> Icon Integer The ID of the icon the user has chosen <code>22</code> Ship Integer The ID of the ship the user has chosen <code>23</code> Ball Integer The ID of the ball the user has chosen <code>24</code> UFO Integer The ID of the UFO the user has chosen <code>25</code> Wave Integer The ID of the wave the user has chosen <code>26</code> Robot Integer The ID of the robot the user has chosen <code>27</code> Trail Integer The ID of the trail the user has chosen <code>28</code> Glow Integer Whether the user has glow activated <code>29</code> Registered Integer Whether the user's account has been registered <code>30</code> Global Rank Integer The rank of the user on the global leaderboard <code>31</code> Friend State Integer Whether the user is friends with a target user (<code>0</code>: Not friends, <code>1</code>: Already friends, <code>3</code>: Sent request to target, <code>4</code>: Target sent request) <code>38</code> Messages Integer How many new messages the user has <code>39</code> Friend Requests Integer How many new friend requests the user has <code>40</code> New Friends Integer How many new friends the user has <code>41</code> New Friend Request Bool If the friend request from this user is new <code>42</code> Age String The time since the user has submitted a levelScore <code>43</code> Spider Integer The ID of the spider the user has chosen <code>44</code> Twitter String The Twitter URL the user has linked <code>45</code> Twitch String The Twitch URL the user has linked <code>46</code> Diamonds Integer The number of diamonds the user has earned <code>48</code> Death Effect Integer The ID of the death effect the user has chosen <code>49</code> Mod Level Integer The type of moderator the user is (<code>0</code>: Not a mod, <code>1</code>: Mod, <code>2</code>: Elder Mod) <code>50</code> Comment History State Integer Who the user allows to see their comment history (<code>0</code>: All, <code>1</code>: Only friends, <code>2</code>: None) <code>51</code> Glow Color Integer The chosen glow color <code>52</code> Moons Integer The number of moons the user has earned <code>53</code> Swing Integer The ID of the swing the user has chosen <code>54</code> Jetpack Integer The ID of the jetpack the user has chosen <code>55</code> Demon List String A list of all of the demons the user has completed <code>56</code> Level List String A list of all of the levels the user has completed <code>57</code> Platformer Level List String A list of all of the platformer levels the user has completed <p>Note</p> <p>In keys <code>20</code> (YouTube), <code>44</code> (Twitter), and <code>45</code> (Twitch), only the user-specific part of the URL is stored. In order to get the URL, you must prepend them with the website URL.  </p> <p>If key <code>20</code> were to be <code>UCT12Cnpkd-6kQEewKv_kqbQ</code>, you must prepend 'https://www.youtube.com/channel/' to get the full, usable URL</p>"},{"location":"server/resources/user/#level-lists","title":"Level Lists","text":"<p>Multiple lists of levels are stored in the user resource, which are formatted as an ordered, comma-seperated list. These are to keep track of the user's completed demons, levels, and platformer levels for display in the profile.</p>"},{"location":"server/resources/user/#demon-list","title":"Demon List","text":"<p>A user's demon list contains all of the demon levels the user has completed. From left to right, it is in the order of:</p> <ul> <li>Easy, Medium, Hard, Insane, Extreme, Platformer Easy, Platformer Medium, Platformer Hard, Platformer Insane, Platformer Extreme, Weekly, Gauntlet</li> </ul> <p>Example</p> <pre><code>2,2,1,0,0,0,0,0,0,0,0,0</code></pre>"},{"location":"server/resources/user/#level-list","title":"Level List","text":"<p>A user's level list contains all of the classic levels the user has completed. From left to right, it is in the order of:</p> <ul> <li>Auto, Easy, Normal, Hard, Harder, Insane, Daily, Gauntlet</li> </ul> <p>Example</p> <pre><code>51,32,82,280,105,20,71,5</code></pre>"},{"location":"server/resources/user/#platformer-level-list","title":"Platformer Level List","text":"<p>A user's platformer level list contains all of the platformer levels the user has completed. From left to right, it is in the order of:</p> <ul> <li>Auto, Easy, Normal, Hard, Harder, Insane</li> </ul> <p>Example</p> <pre><code>0,3,6,21,6,2,0</code></pre>"},{"location":"server/resources/user/#parsed-user-example","title":"Parsed User Example","text":"Example <pre><code>{\n    info: {\n        username: \"RobTop\",\n        userId: 16,\n        globalRank: 258348,\n        accountId: 71,\n        modLevel: \"elder_mod\"\n    },\n    stats: {\n        levels: {\n            classic: {\n                auto: 51,\n                easy: 32,\n                normal: 82,\n                hard: 280,\n                harder: 105,\n                insane: 20,\n                daily: 71,\n                gauntlet: 5,\n                total: 646,\n                unique: 570\n            },\n            platformer: {\n                auto: 0,\n                easy: 3,\n                normal: 6,\n                hard: 21,\n                harder: 6,\n                insane: 2,\n                total: 38,\n                unique: 38\n            },\n            total: 684,\n            unique: 608\n        },\n        secretCoins: 20,\n        userCoins: 175,\n        stars: 2966,\n        moons: 180,\n        diamonds: 3259,\n        creatorPoints: 0,\n        demons: {\n            classic: {\n                easy: 2,\n                medium: 2,\n                hard: 1,\n                insane: 0,\n                extreme: 0,\n                total: 5\n            },\n            platformer: {\n                easy: 0,\n                medium: 0,\n                hard: 0,\n                insane: 0,\n                extreme: 0,\n                total: 0\n            },\n            weekly: 0,\n            gauntlet: 0,\n            total: 5,\n            unique: 5\n        }\n    },\n    icons: {\n        colors: {\n            primary: 35,\n            secondary: 2,\n            glow: 0\n        },\n        cube: 483,\n        ship: 1,\n        ball: 1,\n        ufo: 1,\n        wave: 1,\n        robot: 1,\n        hasGlow: false,\n        spider: 1,\n        deathEffect: 1,\n        swing: 1,\n        jetpack: 1\n    },\n    social: {\n        whoCanMessage: \"none\",\n        whoCanFriend: \"none\",\n        whoCanSeeComments: \"all\",\n        friendState: \"none\",\n        registered: true\n    },\n    connections: {\n        youtube: \"https://www.youtube.com/channel/UCz_yk8mDSAnxJq0ar66L4sw\",\n        twitter: \"https://twitter.com/RobTopGames\",\n        twitch: \"https://www.twitch.tv/robtopgames\"\n    }\n}</code></pre>"},{"location":"server/resources/user/#trivia","title":"Trivia","text":"<ul> <li>Setting key <code>29</code> (Registered) to <code>0</code> prevents most aspects of the profile from loading</li> <li>Key <code>27</code> (Trail) is impossible to recieve from the server as the server doesn't store that information</li> </ul>"}]}