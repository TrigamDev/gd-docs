{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"server/endpoints/users/getGJUserInfo20/","title":"getGJUserInfo20.php","text":"<p>Gets the account info of a specific user, supplied by their account ID. <code>https://www.boomlings.com/database/getGJUserInfo20.php</code></p>"},{"location":"server/endpoints/users/getGJUserInfo20/#parameters","title":"Parameters","text":"Name Value Type Required? Description targetAccountID - Integer \u2714 The account ID of the user you want to get the information of secret Wmfd2893gb7 String \u2714 A 'password' needed for all API requests gameVersion 22 Integer \u2716 The version of Geometry Dash binaryVersion 40 Integer \u2716 The version of the Geometry Dash servers gdw 0 Integer \u2716 Whether the request is being made from Geometry Dash World accountID - Integer \u2716 The account ID of the user making the request uuid - Integer \u2716 The user ID of the user making the request udid - String \u2716 ? gjp2 - GJP2 \u2716 The GJP2 of the user making the request <p>Note</p> <p>Values of <code>-</code> are variable and should be supplied depending on the target user and the user making the request</p>"},{"location":"server/endpoints/users/getGJUserInfo20/#response","title":"Response","text":"<p>Returns a user object for the user you want the account info of</p> <p>Example</p> <pre><code>1:Trigam:2:15765803:13:118:17:412:10:94:11:3:51:3:3:4283:52:223:46:15276:4:101:8:0:18:0:19:0:50:1:20:UCT12Cnpkd-6kQEewKv_kqbQ:21:376:22:129:23:30:24:83:25:26:26:34:28:1:43:29:48:15:53:12:54:2:30:117824:16:970465:31:0:44:Trigam04:45:TrigamDev:49:0:55:66,10,5,0,0,2,2,1,0,0,11,3:56:90,50,59,177,138,43,44,68:57:1,2,6,13,11,2,0:29:1\n</code></pre>"},{"location":"server/endpoints/users/getGJUserInfo20/#example","title":"Example","text":"JSPython <pre><code>import axios from \"axios\"\n\nlet data = {\n    \"targetAccountID\": 970465,\n    \"secret\": \"Wmfd2893gb7\"\n}\nlet headers = {\n    \"User-Agent\": \"\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\n\nlet req = await axios.post(\"https://www.boomlings.com/database/getGJUserInfo20.php\", data, { headers })\nconsole.log(req.data)\n</code></pre> <pre><code>import requests\n\ndata = {\n    \"targetAccountID\": 970465,\n    \"secret\": \"Wmfd2893gb7\"\n}\nheaders = {\n    \"User-Agent\": \"\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n}\n\nreq = requests.post(\"https://www.boomlings.com/database/getGJUserInfo20.php\", data = data, headers = headers)\nprint(req.text)\n</code></pre>"},{"location":"server/resources/user/","title":"Server User Resource","text":""},{"location":"server/resources/user/#user","title":"User","text":"<p>Each player of Geometry Dash has a profile containing various types of data, such as info, stats, completed levels, icons, and connected socials.</p> <p>A typical user server response is structured with a <code>key:value:key:value</code> pairing, with each user object split with a <code>|</code>.</p> <p>Example</p> <pre><code>1:Trigam:2:15765803:13:118:17:412:10:94:11:3:51:3:3:4283:52:223:46:15276:4:101:8:0:18:0:19:0:50:1:20:UCT12Cnpkd-6kQEewKv_kqbQ:21:376:22:129:23:30:24:83:25:26:26:34:28:1:43:29:48:15:53:12:54:2:30:117824:16:970465:31:0:44:Trigam04:45:TrigamDev:49:0:55:66,10,5,0,0,2,2,1,0,0,11,3:56:90,50,59,177,138,43,44,68:57:1,2,6,13,11,2,0:29:1\n</code></pre>"},{"location":"server/resources/user/#keys","title":"Keys","text":"<p>Each <code>key</code> is tied to a component within the client and the <code>value</code> contains the data for that component.</p>"},{"location":"server/resources/user/#list-of-keys","title":"List of Keys","text":"Key Name Type Description <code>1</code> Username String The username of the user <code>2</code> User ID Integer The ID of user <code>3</code> Stars Integer The number of stars the user has earned <code>4</code> Demons Integer The number of demon levels the user has completed <code>6</code> Ranking Integer The global leaderboard position of the user <code>7</code> Account Highlight Integer The Account ID of the user, used for highlighting the user on the leaderboards <code>8</code> Creator Points Integer The number of creator points the user has earned <code>9</code> Display Icon Integer The ID of the display icon <code>10</code> Primary Color Integer The chosen primary user color <code>11</code> Secondary Color Integer The chosen secondary user color <code>13</code> Secret Coins Integer The number of secret coins the user has collected <code>14</code> Display Icon Type Integer The type of the display icon <code>15</code> Special Integer Use is unknown, usually the same for all users <code>16</code> Account ID Integer The account ID of the user <code>17</code> User Coins Integer The number of user coins the user has collected <code>18</code> Message State Integer Who the user allows messages from (<code>0</code>: All, <code>1</code>: Friends, <code>2</code>: None) <code>19</code> Friend Request State Integer Who the user allows friend requests from (<code>0</code>: All, <code>1</code>: None) <code>20</code> YouTube String The YouTube URL the user has linked <code>21</code> Icon Integer The ID of the icon the user has chosen <code>22</code> Ship Integer The ID of the ship the user has chosen <code>23</code> Ball Integer The ID of the ball the user has chosen <code>24</code> UFO Integer The ID of the UFO the user has chosen <code>25</code> Wave Integer The ID of the wave the user has chosen <code>26</code> Robot Integer The ID of the robot the user has chosen <code>27</code> Trail Integer The ID of the trail the user has chosen <code>28</code> Glow Integer Whether the user has glow activated <code>29</code> Registered Integer Whether the user's account has been registered <code>30</code> Global Rank Integer The rank of the user on the global leaderboard <code>31</code> Friend State Integer Whether the user is friends with a target user (<code>0</code>: Not friends, <code>1</code>: Already friends, <code>3</code>: Sent request to target, <code>4</code>: Target sent request) <code>38</code> Messages Integer How many new messages the user has <code>39</code> Friend Requests Integer How many new friend requests the user has <code>40</code> New Friends Integer How many new friends the user has <code>41</code> New Friend Request Bool If the friend request from this user is new <code>42</code> Age String The time since the user has submitted a levelScore <code>43</code> Spider Integer The ID of the spider the user has chosen <code>44</code> Twitter String The Twitter URL the user has linked <code>45</code> Twitch String The Twitch URL the user has linked <code>46</code> Diamonds Integer The number of diamonds the user has earned <code>48</code> Death Effect Integer The ID of the death effect the user has chosen <code>49</code> Mod Level Integer The type of moderator the user is (<code>0</code>: Not a mod, <code>1</code>: Mod, <code>2</code>: Elder Mod) <code>50</code> Comment History State Integer Who the user allows to see their comment history (<code>0</code>: All, <code>1</code>: Only friends, <code>2</code>: None) <code>51</code> Glow Color Integer The chosen glow color <code>52</code> Moons Integer The number of moons the user has earned <code>53</code> Swing Integer The ID of the swing the user has chosen <code>54</code> Jetpack Integer The ID of the jetpack the user has chosen <code>55</code> Demon List String A list of all of the demons the user has completed <code>56</code> Level List String A list of all of the levels the user has completed <code>57</code> Platformer Level List String A list of all of the platformer levels the user has completed <p>Note</p> <p>In keys <code>20</code> (YouTube), <code>44</code> (Twitter), and <code>45</code> (Twitch), only the user-specific part of the URL is stored. In order to get the URL, you must prepend them with the website URL.  </p> <p>If key <code>20</code> were to be <code>UCT12Cnpkd-6kQEewKv_kqbQ</code>, you must prepend 'https://www.youtube.com/channel/' to get the full, usable URL</p>"},{"location":"server/resources/user/#level-lists","title":"Level Lists","text":"<p>Multiple lists of levels are stored in the user resource, which are formatted as an ordered, comma-seperated list. These are to keep track of the user's completed demons, levels, and platformer levels for display in the profile.</p>"},{"location":"server/resources/user/#demon-list","title":"Demon List","text":"<p>A user's demon list contains all of the demon levels the user has completed. From left to right, it is in the order of:</p> <ul> <li>Easy, Medium, Hard, Insane, Extreme, Platformer Easy, Platformer Medium, Platformer Hard, Platformer Insane, Platformer Extreme, Weekly, Gauntlet</li> </ul> <p>Example</p> <pre><code>66,10,5,0,0,2,2,1,0,0,11,3\n</code></pre>"},{"location":"server/resources/user/#level-list","title":"Level List","text":"<p>A user's level list contains all of the classic levels the user has completed. From left to right, it is in the order of:</p> <ul> <li>Auto, Easy, Normal, Hard, Harder, Insane, Daily, Gauntlet</li> </ul> <p>Example</p> <pre><code>90,50,59,177,138,43,44,68\n</code></pre>"},{"location":"server/resources/user/#platformer-level-list","title":"Platformer Level List","text":"<p>A user's platformer level list contains all of the platformer levels the user has completed. From left to right, it is in the order of:</p> <ul> <li>Auto, Easy, Normal, Hard, Harder, Insane</li> </ul> <p>Example</p> <pre><code>1,2,6,13,11,2,0\n</code></pre>"},{"location":"server/resources/user/#parsed-user-example","title":"Parsed User Example","text":"Example <pre><code>{\n    info: {\n        username: \"Trigam\",\n        userId: 15765803,\n        accountId: 970465,\n        globalRank: 117824,\n        modLevel: 0\n    },\n    stats: {\n        stars: 4298,\n        moons: 223,\n        diamonds: 15380,\n        secretCoins: 118,\n        userCoins: 412,\n        creatorPoints: 0,\n        demons: {\n            classic: {\n                easy: 66,\n                medium: 10,\n                hard: 5,\n                insane: 0,\n                extreme: 0\n            },\n            platformer: {\n                easy: 2,\n                medium: 2,\n                hard: 1,\n                insane: 0,\n                extreme: 0\n            },\n            weekly: 11,\n            gauntlet: 3,\n            total: 101\n        },\n        levels: {\n            classic: {\n                auto: 90,\n                easy: 50,\n                normal: 59,\n                hard: 177,\n                harder: 138,\n                insane: 43,\n                daily: 44,\n                gauntlet: 68\n            },\n            platformer: {\n                auto: 1,\n                easy: 2,\n                normal: 6,\n                hard: 13,\n                harder: 11,\n                insane: 2\n            }\n        }\n    },\n    icons: {\n        colors: {\n            primary: 94,\n            secondary: 3,\n            glow: 3\n        },\n        glow: 1,\n        cube: 376,\n        ship: 129,\n        ball: 30,\n        ufo: 83,\n        wave: 26,\n        robot: 34,\n        spider: 29,\n        swing: 12,\n        jetpack: 2\n        deathEffect: 15,\n    },\n    social: {\n        whoCanMessage: 0,\n        whoCanFriend: 0,\n        registered: true,\n        friendState: 0,\n        whoCanSeeComments: 1\n    },\n    connections: {\n        youtube: \"UCT12Cnpkd-6kQEewKv_kqbQ\",\n        twitter: \"Trigam04\",\n        twitch: \"TrigamDev\"\n    }\n}\n</code></pre>"},{"location":"server/resources/user/#trivia","title":"Trivia","text":"<ul> <li>Setting key <code>29</code> (Registered) to <code>0</code> prevents most aspects of the profile from loading</li> <li>Key <code>27</code> (Trail) is impossible to recieve from the server as the server doesn't store that information</li> </ul>"}]}